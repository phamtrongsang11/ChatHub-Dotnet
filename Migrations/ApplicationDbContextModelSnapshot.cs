// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TeamChat.Database;

#nullable disable

namespace TeamChat.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TeamChat.Models.Channel", b =>
                {
                    b.Property<string>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("profileId")
                        .HasColumnType("text");

                    b.Property<string>("serverId")
                        .HasColumnType("text");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("profileId");

                    b.HasIndex("serverId");

                    b.ToTable("channels");
                });

            modelBuilder.Entity("TeamChat.Models.Conversation", b =>
                {
                    b.Property<string>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("memberOneId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("memberTwoId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("memberOneId");

                    b.HasIndex("memberTwoId");

                    b.ToTable("Conversation");
                });

            modelBuilder.Entity("TeamChat.Models.DirectMessage", b =>
                {
                    b.Property<string>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("conversationId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("fileUrl")
                        .HasColumnType("text");

                    b.Property<string>("memberId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("conversationId");

                    b.HasIndex("memberId");

                    b.ToTable("DirectMessage");
                });

            modelBuilder.Entity("TeamChat.Models.Member", b =>
                {
                    b.Property<string>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("profileId")
                        .HasColumnType("text");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("serverId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("profileId");

                    b.HasIndex("serverId");

                    b.ToTable("members");
                });

            modelBuilder.Entity("TeamChat.Models.Message", b =>
                {
                    b.Property<string>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("channelId")
                        .HasColumnType("text");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("fileUrl")
                        .HasColumnType("text");

                    b.Property<string>("memberId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("channelId");

                    b.HasIndex("memberId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("TeamChat.Models.Profile", b =>
                {
                    b.Property<string>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("imageUrl")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.ToTable("profiles");

                    b.HasData(
                        new
                        {
                            id = "df4cc051-d0c4-4b4e-963a-5de8a79859ac",
                            createdAt = new DateTime(2024, 2, 11, 15, 12, 17, 621, DateTimeKind.Utc).AddTicks(8028),
                            email = "john@gmail.com",
                            imageUrl = "my image url",
                            name = "John"
                        });
                });

            modelBuilder.Entity("TeamChat.Models.Server", b =>
                {
                    b.Property<string>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("imageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("inviteCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("profileId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("profileId");

                    b.ToTable("servers");
                });

            modelBuilder.Entity("TeamChat.Models.Channel", b =>
                {
                    b.HasOne("TeamChat.Models.Profile", "profile")
                        .WithMany("channels")
                        .HasForeignKey("profileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TeamChat.Models.Server", "server")
                        .WithMany("channels")
                        .HasForeignKey("serverId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("profile");

                    b.Navigation("server");
                });

            modelBuilder.Entity("TeamChat.Models.Conversation", b =>
                {
                    b.HasOne("TeamChat.Models.Member", "memberOne")
                        .WithMany("conversationsInitialted")
                        .HasForeignKey("memberOneId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TeamChat.Models.Member", "memberTwo")
                        .WithMany("conversationsReceived")
                        .HasForeignKey("memberTwoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("memberOne");

                    b.Navigation("memberTwo");
                });

            modelBuilder.Entity("TeamChat.Models.DirectMessage", b =>
                {
                    b.HasOne("TeamChat.Models.Conversation", "conversation")
                        .WithMany("directMessages")
                        .HasForeignKey("conversationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TeamChat.Models.Member", "member")
                        .WithMany("directMessages")
                        .HasForeignKey("memberId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("conversation");

                    b.Navigation("member");
                });

            modelBuilder.Entity("TeamChat.Models.Member", b =>
                {
                    b.HasOne("TeamChat.Models.Profile", "profile")
                        .WithMany("members")
                        .HasForeignKey("profileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TeamChat.Models.Server", "server")
                        .WithMany("members")
                        .HasForeignKey("serverId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("profile");

                    b.Navigation("server");
                });

            modelBuilder.Entity("TeamChat.Models.Message", b =>
                {
                    b.HasOne("TeamChat.Models.Channel", "channel")
                        .WithMany("messages")
                        .HasForeignKey("channelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TeamChat.Models.Member", "member")
                        .WithMany("messages")
                        .HasForeignKey("memberId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("channel");

                    b.Navigation("member");
                });

            modelBuilder.Entity("TeamChat.Models.Server", b =>
                {
                    b.HasOne("TeamChat.Models.Profile", "profile")
                        .WithMany("servers")
                        .HasForeignKey("profileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("profile");
                });

            modelBuilder.Entity("TeamChat.Models.Channel", b =>
                {
                    b.Navigation("messages");
                });

            modelBuilder.Entity("TeamChat.Models.Conversation", b =>
                {
                    b.Navigation("directMessages");
                });

            modelBuilder.Entity("TeamChat.Models.Member", b =>
                {
                    b.Navigation("conversationsInitialted");

                    b.Navigation("conversationsReceived");

                    b.Navigation("directMessages");

                    b.Navigation("messages");
                });

            modelBuilder.Entity("TeamChat.Models.Profile", b =>
                {
                    b.Navigation("channels");

                    b.Navigation("members");

                    b.Navigation("servers");
                });

            modelBuilder.Entity("TeamChat.Models.Server", b =>
                {
                    b.Navigation("channels");

                    b.Navigation("members");
                });
#pragma warning restore 612, 618
        }
    }
}
